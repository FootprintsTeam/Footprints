<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neo4jClient</name>
    </assembly>
    <members>
        <member name="T:Neo4jClient.Cypher.All">
            <summary>
            Represents a star in a Cypher function, so <code>All.Count()</code>
            is equivalent to <code>count(*)</code>. Only for use in return expressions
            like <code>.Return(() => new { Count = All.Count() })</code>, or start
            expressions like <code>Start(new { n = All.Nodes })</code>, but not to be
            called directly. (This class is just syntactic sugar for lambda expressions;
            there is no .NET implementation of its methods.)
            </summary>
        </member>
        <member name="F:Neo4jClient.Cypher.All.Nodes">
            <summary>
            Equivalent to <code>node(*)</code>, for use in <code>START</code> clauses
            such as <code>Start(new { n = All.Nodes })</code>
            </summary>
        </member>
        <member name="M:Neo4jClient.Cypher.All.Count">
            <summary>
            Equivalent to <code>count(*)</code>
            http://docs.neo4j.org/chunked/stable/query-aggregation.html#_count
            </summary>
        </member>
        <member name="M:Neo4jClient.Cypher.CypherWithExpressionBuilder.BuildText(System.Linq.Expressions.MemberInitExpression)">
            <remarks>
            This build method caters to object initializers, like:
            
                new MyType { Foo = "Bar", Baz = "Qak" }
            
            It does not however cater to anonymous types, as they don't compile
            down to traditional object initializers.
            
            <see cref="M:Neo4jClient.Cypher.CypherWithExpressionBuilder.BuildText(System.Linq.Expressions.NewExpression)"/> caters to anonymous types.
            </remarks>
        </member>
        <member name="M:Neo4jClient.Cypher.CypherWithExpressionBuilder.BuildText(System.Linq.Expressions.NewExpression)">
            <remarks>
            This C#:
            
                new { Foo = "Bar", Baz = "Qak" }
            
            translates to:
            
                new __SomeAnonymousType("Bar", "Qak")
            
            which is then a NewExpression rather than a MemberInitExpression.
            
            This is the scenario that this build method caters for.
            </remarks>
        </member>
        <member name="M:Neo4jClient.Cypher.CypherWithExpressionBuilder.BuildText(System.Linq.Expressions.MethodCallExpression)">
            <remarks>
            This build method caters to expressions like: <code>item => item.Count()</code>
            </remarks>
        </member>
        <member name="M:Neo4jClient.Cypher.CypherWithExpressionBuilder.BuildText(System.Linq.Expressions.MemberExpression)">
            <remarks>
            This build method caters to expressions like: <code>item => item.As&lt;Foo&gt;().Bar</code>
            </remarks>
        </member>
        <member name="M:Neo4jClient.Relationship.ByIndexLookup(System.String,System.String,System.Object)">
            <summary>
            Used for Cypher <code>START</code> clauses, like <code>Start(new { foo = Relationship.ByIndexLookup(…) })</code>
            </summary>
        </member>
        <member name="M:Neo4jClient.Relationship.ByIndexQuery(System.String,System.String)">
            <summary>
            Used for Cypher <code>START</code> clauses, like <code>Start(new { foo = Relationship.ByIndexQuery(…) })</code>
            </summary>
        </member>
        <member name="M:Neo4jClient.Cypher.Node.ByIndexLookup(System.String,System.String,System.Object)">
            <summary>
            Used for Cypher <code>START</code> clauses, like <code>Start(new { foo = Node.ByIndexLookup(…) })</code>
            </summary>
        </member>
        <member name="M:Neo4jClient.Cypher.Node.ByIndexQuery(System.String,System.String)">
            <summary>
            Used for Cypher <code>START</code> clauses, like <code>Start(new { foo = Node.ByIndexQuery(…) })</code>
            </summary>
        </member>
        <member name="M:Neo4jClient.Cypher.Return.As``1(System.String)">
            <summary>
            Used for Cypher <code>RETURN</code> clauses, like <code>Return(() => new { Foo = Return.As&lt;string&gt;("weird_func(foo).wow") })</code>
            </summary>
        </member>
        <member name="T:Neo4jClient.IRawGraphClient">
            <summary>
            These are signatures that our <see cref="T:Neo4jClient.GraphClient"/> exposes to
            support things like our Cypher infrastructure, but we don't want
            people to call directly. (Because there are nicer ways to do it.)
            </summary>
        </member>
        <member name="M:Neo4jClient.IGraphClient.Create``1(``0,System.Collections.Generic.IEnumerable{Neo4jClient.IRelationshipAllowingParticipantNode{``0}},System.Collections.Generic.IEnumerable{Neo4jClient.IndexEntry})">
            <summary>
            Creates a node, relationships and index entries all in a single HTTP call (which also means a single transaction).
            </summary>
        </member>
        <member name="M:Neo4jClient.IGraphClient.Update``1(Neo4jClient.NodeReference{``0},``0,System.Collections.Generic.IEnumerable{Neo4jClient.IndexEntry})">
            <summary>
            Retrieves the specified node, gives you an opportunity to mutate it in the callback, then persists the final object back to Neo4j. Results in two calls over the wire: one to retrieve, one to set.
            </summary>
            <typeparam name="TNode">POCO type that represents the structure of the node's data</typeparam>
            <param name="nodeReference">The node to retrieve and update</param>
            <param name="replacementData">Data to replace the node with</param>
            <param name="indexEntries">New index entries that should also be persisted</param>
        </member>
        <member name="M:Neo4jClient.IGraphClient.Update``1(Neo4jClient.NodeReference{``0},System.Action{``0},System.Func{``0,System.Collections.Generic.IEnumerable{Neo4jClient.IndexEntry}},System.Action{System.Collections.Generic.IEnumerable{Neo4jClient.ApiModels.FieldChange}})">
            <summary>
            Retrieves the specified node, gives you an opportunity to mutate it in the callback, then persists the final object back to Neo4j. Results in two calls over the wire: one to retrieve, one to set.
            </summary>
            <typeparam name="TNode">POCO type that represents the structure of the node's data</typeparam>
            <param name="nodeReference">The node to retrieve and update</param>
            <param name="updateCallback">A callback to mutate the values between retrieval and persistence</param>
            <param name="indexEntriesCallback">A callback to return new index entries that should also be persisted</param>
            <param name="changeCallback">A callback to respond to the resulting property changes</param>
        </member>
        <member name="M:Neo4jClient.IGraphClient.DeleteIndexEntries(System.String,Neo4jClient.NodeReference)">
            <summary>
            Delete all index entries for specified node
            </summary>
        </member>
        <member name="M:Neo4jClient.IGraphClient.DeleteIndexEntries(System.String,Neo4jClient.RelationshipReference)">
            <summary>
            Delete all index entries for specified relationship
            </summary>
        </member>
        <member name="F:Neo4jClient.Cypher.CypherResultMode.Set">
            <summary>
            In this mode, we expect the Cypher table to contain a single column. When deserializing it,
            instead of giving the developer a list of one-column rows, we'll just give them a list of objects.
            Effectively, we unwrap the column into a straight up array of entries. This is done to make the
            syntax a little nicer when a developer wants to return a single identity and not a full table.
            </summary>
        </member>
        <member name="F:Neo4jClient.Cypher.CypherResultMode.Projection">
            <summary>
            This is the default mode, and tells the serializer to treat each row as one object to deserialize.
            </summary>
        </member>
        <member name="M:Neo4jClient.Cypher.CypherReturnExpressionBuilder.BuildText(System.Linq.Expressions.MemberInitExpression,Neo4jClient.Cypher.CypherCapabilities,System.Collections.Generic.IEnumerable{Newtonsoft.Json.JsonConverter})">
            <remarks>
            This build method caters to object initializers, like:
            
                new MyType { Foo = "Bar", Baz = "Qak" }
            
            It does not however cater to anonymous types, as they don't compile
            down to traditional object initializers.
            
            <see cref="M:Neo4jClient.Cypher.CypherReturnExpressionBuilder.BuildText(System.Linq.Expressions.NewExpression,Neo4jClient.Cypher.CypherCapabilities,System.Collections.Generic.IEnumerable{Newtonsoft.Json.JsonConverter})"/> caters to anonymous types.
            </remarks>
        </member>
        <member name="M:Neo4jClient.Cypher.CypherReturnExpressionBuilder.BuildText(System.Linq.Expressions.NewExpression,Neo4jClient.Cypher.CypherCapabilities,System.Collections.Generic.IEnumerable{Newtonsoft.Json.JsonConverter})">
            <remarks>
            This C#:
            
                new { Foo = "Bar", Baz = "Qak" }
            
            translates to:
            
                new __SomeAnonymousType("Bar", "Qak")
            
            which is then a NewExpression rather than a MemberInitExpression.
            
            This is the scenario that this build method caters for.
            </remarks>
        </member>
        <member name="M:Neo4jClient.Cypher.CypherReturnExpressionBuilder.BuildText(System.Linq.Expressions.MethodCallExpression,Neo4jClient.Cypher.CypherCapabilities,System.Collections.Generic.IEnumerable{Newtonsoft.Json.JsonConverter})">
            <remarks>
            This build method caters to expressions like: <code>item => item.Count()</code>
            </remarks>
        </member>
        <member name="M:Neo4jClient.Cypher.CypherReturnExpressionBuilder.BuildText(System.Linq.Expressions.MemberExpression,Neo4jClient.Cypher.CypherCapabilities,System.Collections.Generic.IEnumerable{Newtonsoft.Json.JsonConverter})">
            <remarks>
            This build method caters to expressions like: <code>item => item.As&lt;Foo&gt;().Bar</code>
            </remarks>
        </member>
        <member name="M:Neo4jClient.Cypher.ICypherResultItem.As``1">
            <summary>
            Does not emit anything into the query; purely used for design-time type coersion in C#
            </summary>
        </member>
        <member name="M:Neo4jClient.Cypher.ICypherResultItem.Node``1">
            <summary>
            DO NOT USE IN NEW CODE.
            Shortcut for As&lt;Node&lt;T&gt;&gt;.
            The general trend in both Neo4j and Cypher is moving way from returning node references. Use As&lt;T&gt; instead to return the information you need, without the metadata of the node. For future queries, use indexes, match expressions and well-known domain-specific data to locate the node you need rather than passing in a reference to it. (In the Neo4j 2.0 timeframe, even the START clause is starting to be deprecated in favour of MATCH and WHERE.) For updating or deleting nodes, start to use mutable Cypher instead. Clauses likE CREATE, SET and DELETE will let you do more in the same query, rather than sending extra HTTP calls over the wire for each action.
            </summary>
        </member>
        <member name="M:Neo4jClient.Cypher.ICypherResultItem.CollectAs``1">
            <summary>
            Equivalent to <code>RETURN collect(foo)</code>
            http://docs.neo4j.org/chunked/stable/query-aggregation.html#aggregation-collect
            </summary>
        </member>
        <member name="M:Neo4jClient.Cypher.ICypherResultItem.CollectAsDistinct``1">
            <summary>
            Equivalent to <code>RETURN collect(distinct foo)</code>
            http://docs.neo4j.org/chunked/stable/query-aggregation.html#aggregation-collect
            </summary>
        </member>
        <member name="M:Neo4jClient.Cypher.ICypherResultItem.Head">
            <summary>
            Equivalent to <code>RETURN head()</code>
            http://docs.neo4j.org/chunked/stable/query-functions-scalar.html#functions-head
            </summary>
        </member>
        <member name="M:Neo4jClient.Cypher.ICypherResultItem.Last">
            <summary>
            Equivalent to <code>RETURN last()</code>
            http://docs.neo4j.org/chunked/stable/query-functions-scalar.html#functions-last
            </summary>
        </member>
        <member name="M:Neo4jClient.Cypher.ICypherResultItem.Count">
            <summary>
            Equivalent to <code>RETURN count(foo)</code>
            http://docs.neo4j.org/chunked/stable/query-aggregation.html#_count
            </summary>
        </member>
        <member name="M:Neo4jClient.Cypher.ICypherResultItem.CountDistinct">
            <summary>
            Equivalent to <code>RETURN count(distinct foo)</code>
            http://docs.neo4j.org/chunked/stable/query-aggregation.html#_count
            http://docs.neo4j.org/chunked/stable/query-aggregation.html#aggregation-distinct
            </summary>
        </member>
        <member name="M:Neo4jClient.Cypher.ICypherResultItem.Length">
            <summary>
            Equivalent to <code>RETURN length(foo)</code>
            http://docs.neo4j.org/chunked/stable/query-function.html#functions-length
            </summary>
        </member>
        <member name="M:Neo4jClient.Cypher.ICypherResultItem.Type">
            <summary>
            Equivalent to <code>RETURN type(foo)</code>
            http://docs.neo4j.org/chunked/stable/query-function.html#functions-type
            </summary>
        </member>
        <member name="M:Neo4jClient.Cypher.ICypherResultItem.Id">
            <summary>
            Equivalent to <code>RETURN id(foo)</code>
            http://docs.neo4j.org/chunked/stable/query-function.html#functions-id
            </summary>
        </member>
        <member name="M:Neo4jClient.Cypher.ICypherResultItem.Labels">
            <summary>
            Equivalent to <code>RETURN labels(foo)</code>
            http://docs.neo4j.org/chunked/preview/query-functions-collection.html#functions-labels
            </summary>
        </member>
        <member name="P:Neo4jClient.ApiModels.RootApiResponse.Version">
            <summary>
            Returns a structured representation of the Neo4j server version, but only with partial data.
            The version type (milestone, preview, release candidate, stable) is not taken in to account,
            so both 1.9.M01, 1.9.RC1 and 1.9.1 will all return 1.9.0.1.
            </summary>
        </member>
    </members>
</doc>
