@model Footprints.ViewModels.JourneyViewModel
@using Footprints.ViewModels;
@using Footprints.Models;
@using Newtonsoft.Json;
@using Footprints.Common;
@{
    ViewBag.Title = "Journey";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@Styles.Render("~/css/journey")
<div class="container">
    <div class="innerAll">
        @*Upper Content*@
        <div class="row">
            <div class="timeline-cover">
                <div class="cover image ">
                    <div class="top">
                        <img src="../assets//images/photodune-2755655-party-time-s.jpg" class="img-responsive" />
                    </div>
                </div>
                <div class="widget cover image">
                    <div class="widget-body padding-none margin-none">
                        <div class="innerAll border-right pull-left">
                            <h3 class="margin-none">@Model.AuthorName</h3>
                            <span>@Model.TimeAgo</span>
                        </div>
                        <div class="innerAll pull-left">
                            <p class="lead margin-none "> <i class="fa fa-quote-left text-muted fa-fw"></i>@Model.Description</p>
                        </div>
                        <div class="innerAll pull-right">
                            @{
                                if (!(bool)TempData["AlreadyLike"])
                                {
                                    <a class="btn btn-info"><i class="fa fa-thumbs-o-down" id="like-btn"></i> Unlike</a>
                                }
                                else
                                {
                                    <a class="btn btn-info"><i class="fa fa-thumbs-o-up" id="like-btn"></i> Like</a>
                                }
                                TempData.Remove("AlreadyLike");
                            }
                            <a class="btn btn-info"><i class="fa fa-share" id="like-btn"></i> Share</a>
                            @{
                                if ((bool)TempData["IsAuthor"])
                                {
                                    <a class="btn btn-primary" data-toggle="modal" data-target="#edit-journey-modal"><span class="glyphicon glyphicon-edit" id="edit-btn"></span> Edit</a>
                                    <a class="btn btn-danger" data-toggle="modal" data-target="#delete-journey-modal"><span class="glyphicon glyphicon-remove" id="delete-btn"></span> Delete</a>
                                }
                            }
                        </div>
                    </div>
                    <div class="clearfix"></div>
                </div>
            </div>
        </div>
        @*Time Line Div*@
        <div class="row">
            <div class="col-lg-3 col-md-4">
                @*Stats and Detail*@
                <ul class="list-group list-group-1 margin-none">
                    <li class="list-group-item active"><a href="#"><i class="fa fa-user"></i> Information</a></li>
                    <li class="list-group-item text-center">
                        <h3 class="strong margin-none innerB">@Model.AuthorName</h3>
                    </li>
                    <li class="list-group-item">
                        <a href="#">
                            <span class="badge pull-right badge-primary hidden-md">@Model.NumberOfDestination</span><i class="fa fa-map-marker"></i> Destinations
                        </a>
                    </li>
                    <li class="list-group-item">
                        <a href="#">
                            <span class="badge pull-right badge-primary hidden-md">@Model.NumberOfPhoto</span><i class="fa fa-picture-o"></i> Gallery
                        </a>
                    </li>
                    <li class="list-group-item">
                        <a href="#">
                            <span class="badge pull-right badge-primary hidden-md">@Model.NumberOfLike</span><i class="fa fa-thumbs-o-up"></i> Liked
                        </a>
                    </li>
                    <li class="list-group-item border-bottom-none">
                        <a href="#"><span class="badge pull-right badge-primary hidden-md">@Model.NumberOfShare</span><i class="fa fa-share-square-o"></i> Shared</a>
                    </li>
                </ul>
                @*End Stats and Detail*@
            </div>

            <div class="pull-right col-lg-9 col-md-8">
                <div class="row innerL innerB">
                    <input id="pac-input" class="controls" type="text" placeholder="Enter a location">
                    <div id="google-map-container" style="height: 400px; width: 100%">
                        <div id="map-canvas"></div>
                        <div id="sp-container">
                            <div id="sp-close-button" class="close-button"><span>×</span></div>
                            <div id="sp-list"></div>
                        </div>
                    </div>
                </div>

                @{Html.RenderPartial("AddNewDestinationForm", @Model.AddNewDestinationFormViewModel);}

                @*Time Line*@
                <div class="media">
                    <a href="" class="btn btn-default pull-left">Today</a>
                    <div class="media-body">
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="Search for a place">
                            <span class="input-group-btn">
                                <button class="btn btn-primary" type="button">Search</button>
                            </span>
                        </div><!-- /input-group -->
                    </div>
                </div>

                <ul class="timeline-activity list-unstyled">
                    @*sample data*@
                    @{
                        if (Model.Destinations.Count() > 0)
                        {
                            foreach (DestinationViewModel viewModel in Model.Destinations)
                            {
                                Html.RenderPartial("DestinationWidget", viewModel);
                            }
                        }
                    }
                </ul>
                @*End Time Line*@

                @{
                    var AddCommentOption = new AjaxOptions()
                    {
                        HttpMethod = "POST",
                        OnBegin = "return validateAddJourneyCommentForm('" + @Model.JourneyID + "');",
                        OnSuccess = "addJourneyComment",
                        OnComplete = "addCommentComplete"
                    };
                }
                @if (Model.Comments != null && Model.Comments.Count > 0)
                {
                    foreach (var comment in Model.Comments)
                    {
                        Html.RenderPartial("CommentItem", comment);
                    }
                }
                <div style="display:none" id="empty-last-journey-comment"></div>
                @using (Ajax.BeginForm("Comment", new { controller = "Journey" }, AddCommentOption))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true)
                    <div class="input-group comment">
                        @Html.HiddenFor(x => Model.JourneyID)
                        @Html.TextBox("Content", null, new { id = "comment-input-journey-" + @Model.JourneyID , @class = "form-control", placeholder = "Comment here ..." })
                        <div class="input-group-btn">
                            <button type="submit" class="btn btn-primary"><i class="fa fa-comment"></i></button>
                        </div>
                    </div>
                }
            </div>
        </div>
        @*End Time Line Div*@
    </div>
</div>
@Scripts.Render("~/script/journey")

@{Html.RenderPartial("EditJourneyForm", Model);}
@* Delete destination confirmation modal*@
<div class="modal fade" id="delete-journey-modal">
    <div class="modal-dialog">
        <div class="modal-content">
            <!-- Modal heading -->
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h3 class="modal-title">Delete Journey</h3>
            </div>
            <!-- // Modal heading END -->
            <!-- Modal body -->
            <div class="modal-body">
                <div class="innerAll">
                    <div class="innerLR">
                        <div class="form-group">
                            <div class="col-sm-offset-2 col-sm-10">
                                <label class="control-label">Are you sure want to delete this journey?</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- // Modal body END -->
            <div class="modal-footer">
                @using (Html.BeginForm("Delete", "Journey", FormMethod.Post, new { @name = "frmDeleteJourney", @role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(x => x.JourneyID)
                    <button class="btn btn-primary" type="submit"> Confirm</button>
                    <button class="btn btn-primary" data-dismiss="modal">Cancel</button>
                }
            </div>
        </div>
    </div>
</div>
<!-- // Modal END -->
@{
    List<DestinationInfoOnMapViewModel> sortedDestinationList = new List<DestinationInfoOnMapViewModel>();
    var sortedDestinationViewModel = Model.Destinations.OrderBy(x => x.TakenDate).ThenBy(x => x.OrderNumber).ToList();
    foreach (var destination in sortedDestinationViewModel)
    {
        sortedDestinationList.Add(AutoMapper.Mapper.Map<DestinationViewModel, DestinationInfoOnMapViewModel>(destination));
    }
}
<script type="text/javascript">
    var arrDestination = @(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(sortedDestinationList)));
    var destinationURL = '@Url.Action("Index", "Destination", new { destinationID = "xxx"})';

    var isCommentProcessing = false;
    $('[id^="comment-input-"]').keyup(function (ev) {
        if (ev.which == 13) {
            $(this).parents('form').submit();
        }

    });
    function addComment(data) {
        $('#empty-last-comment-' + data.DestinationID).before(
            data.HTMLString
        );
        $('#comment-input-' + data.DestinationID).val('');
    }
    function addJourneyComment(data) {
        $('#empty-last-journey-comment').before(
            data.HTMLString
        );
        $('#comment-input-journey').val('');
    }
    function addCommentComplete() {
        isCommentProcessing = false;
    }
    function validateAddCommentForm(destinationId) {
        if (isCommentProcessing) return false;
        isCommentProcessing = true;

        var txtcontent = $('#comment-input-' + destinationId);
        if (txtcontent == null || txtcontent.val() == null || txtcontent.val().trim().length == 0)
            return false;
        else
            return true;
    }
    function validateAddJourneyCommentForm(journeyID) {
        console.log('validateAddJourneyCommentForm');
        if (isCommentProcessing) return false;
        isCommentProcessing = true;

        var txtcontent = $('#comment-input-journey-' + journeyID);
        if (txtcontent == null || txtcontent.val() == null || txtcontent.val().trim().length == 0)
            return false;
        else
            return true;
    }
</script>
<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=places"></script>
<script src="/assets/plugins/google_map/js/google.map.init.js"></script>
