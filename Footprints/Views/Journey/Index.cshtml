@model Footprints.ViewModels.JourneyViewModel
@using Footprints.ViewModels;
@using Footprints.Models;
@using Newtonsoft.Json;
@{
    ViewBag.Title = "Journey";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@Styles.Render("~/css/journey")
<div class="container">
    <div class="innerAll">
        @*Upper Content*@
        <div class="row">
            <div class="timeline-cover">
                <div class="cover image ">
                    <div class="top">
                        <img src="../assets//images/photodune-2755655-party-time-s.jpg" class="img-responsive" />
                    </div>
                </div>
                <div class="widget cover image">
                    <div class="widget-body padding-none margin-none">
                        <div class="innerAll border-right pull-left">
                            <h3 class="margin-none">@Model.AuthorName</h3>
                            <span>@Model.TimeAgo</span>
                        </div>
                        <div class="innerAll pull-left">
                            <p class="lead margin-none "> <i class="fa fa-quote-left text-muted fa-fw"></i>@Model.Description</p>
                        </div>
                        <div class="innerAll pull-right">
                            <a class="btn btn-info"><i class="fa fa-thumbs-o-down" id="like-btn"></i> Unlike</a>
                            <a class="btn btn-info"><i class="fa fa-share" id="like-btn"></i> Share</a>
                            <a class="btn btn-primary" data-toggle="modal" data-target="#edit-journey-modal"><span class="glyphicon glyphicon-edit" id="edit-btn"></span> Edit</a>
                            <a class="btn btn-danger" data-toggle="modal" data-target="#delete-journey-modal"><span class="glyphicon glyphicon-remove" id="delete-btn"></span> Delete</a>
                        </div>
                    </div>
                    <div class="clearfix"></div>
                </div>
            </div>
        </div>


        @*Time Line Div*@
        <div class="row">
            <div class="col-lg-3 col-md-4">
                @*Stats and Detail*@
                <ul class="list-group list-group-1 margin-none">
                    <li class="list-group-item active"><a href="#"><i class="fa fa-user"></i> Information</a></li>
                    <li class="list-group-item text-center">
                        <h3 class="strong margin-none innerB">@Model.AuthorName</h3>
                    </li>
                    <li class="list-group-item">
                        <a href="#">
                            <span class="badge pull-right badge-primary hidden-md">@Model.NumberOfDestination</span><i class="fa fa-map-marker"></i> Destinations
                        </a>
                    </li>
                    <li class="list-group-item">
                        <a href="#">
                            <span class="badge pull-right badge-primary hidden-md">@Model.NumberOfPhoto</span><i class="fa fa-picture-o"></i> Gallery
                        </a>
                    </li>
                    <li class="list-group-item">
                        <a href="#">
                            <span class="badge pull-right badge-primary hidden-md">@Model.NumberOfLike</span><i class="fa fa-thumbs-o-up"></i> Liked
                        </a>
                    </li>
                    <li class="list-group-item border-bottom-none">
                        <a href="#"><span class="badge pull-right badge-primary hidden-md">@Model.NumberOfShare</span><i class="fa fa-share-square-o"></i> Shared</a>
                    </li>
                </ul>
                @*End Stats and Detail*@
            </div>

            <div class="pull-right col-lg-9 col-md-8">
                <div class="row innerL innerB" >
                    <input id="pac-input" class="controls" type="text" placeholder="Enter a location">
                    <div id="google-map-container" style="height: 400px; width: 100%">
                        <div id="map-canvas"></div>
                        <div id="sp-container">
                            <div id="sp-close-button" class="close-button"><span>×</span></div>
                            <div id="sp-list"></div>
                        </div>
                    </div>
                </div>

                @{Html.RenderPartial("AddNewDestinationForm", @Model.AddNewDestinationFormViewModel);}

                @*Time Line*@
                <div class="media">
                    <a href="" class="btn btn-default pull-left">Today</a>
                    <div class="media-body">
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="Search for a place">
                            <span class="input-group-btn">
                                <button class="btn btn-primary" type="button">Search</button>
                            </span>
                        </div><!-- /input-group -->
                    </div>
                </div>

                <ul class="timeline-activity list-unstyled">
                    @*sample data*@
                    @{
                        if (Model.Destinations.Count() > 0)
                        {
                            foreach (DestinationViewModel viewModel in Model.Destinations)
                            {
                                Html.RenderPartial("DestinationWidget", viewModel);
                            }
                        }
                    }
                </ul>
                @*End Time Line*@
            </div>
        </div>
        @*End Time Line Div*@
    </div>
</div>
@Scripts.Render("~/script/journey")

@{Html.RenderPartial("EditJourneyForm", Model);}
@* Delete destination confirmation modal*@
<div class="modal fade" id="delete-journey-modal">
    <div class="modal-dialog">
        <div class="modal-content">
            <!-- Modal heading -->
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h3 class="modal-title">Delete Journey</h3>
            </div>
            <!-- // Modal heading END -->
            <!-- Modal body -->
            <div class="modal-body">
                <div class="innerAll">
                    <div class="innerLR">
                        <div class="form-group">
                            <div class="col-sm-offset-2 col-sm-10">
                                <label class="control-label">Are you sure want to delete this journey?</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- // Modal body END -->
            <div class="modal-footer">
                @using (Html.BeginForm("Delete", "Journey", FormMethod.Post, new { @name = "frmDeleteJourney", @role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="JourneyID" value="@Model.JourneyID" />
                    <button class="btn btn-primary" type="submit"> Confirm</button>
                    <button class="btn btn-primary" data-dismiss="modal">Cancel</button>
                }
            </div>
        </div>
    </div>
</div>
<!-- // Modal END -->
<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=places"></script>
<script src="/assets/plugins/google_map/js/google.map.init.js"></script>

@*<script>
        //-----------------------------------------
        //insert map

        @{
             var listPlace = new List<Place>();
             foreach(var place in Model.Destinations){
                 listPlace.Add(place.Place);
             }
             var jsonString = JsonConvert.SerializeObject(listPlace);
         }

        //create place array
        var placeArr = $.parseJSON('@jsonString');

        var map;
        google.maps.event.addDomListener(window, 'load', initialize);



        function initialize() {

            /* Create Google Map */
            var myOptions = {
                zoom: 6,
                center: new google.maps.LatLng(41, 19.6),
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                minZoom: 3
            };

            map = new google.maps.Map(document.getElementById('map-canvas'), myOptions);

            /* Add you'r curved lines here */
            $("#map-canvas").curvedLine({
                LatStart: 42.68243562027229,
                LngStart: 23.280029421875042,
                LatEnd: 42.488302202180364,
                LngEnd: 27.432861453125042
            });

        }

        function loadScript() {
            var script = document.createElement('script');
            script.type = 'text/javascript';
            script.src = 'https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false&' +
                'callback=initialize';
            document.body.appendChild(script);
        }

        window.onload = loadScript;

        //draw function
        (function ($) {

            var evenOdd = 0;

            $.fn.extend({

                curvedLine: function (options) {

                    var defaults = {
                        LatStart: null,
                        LngStart: null,
                        LatEnd: null,
                        LngEnd: null,
                        Color: "#FF0000",
                        Opacity: 1,
                        Weight: 3,
                        GapWidth: 0,
                        Horizontal: true,
                        Multiplier: 1,
                        Resolution: 0.1,
                        Map: map
                    }

                    var options = $.extend(defaults, options);

                    return this.each(function () {

                        var o = options;

                        var LastLat = o.LatStart;
                        var LastLng = o.LngStart;

                        var PartLat;
                        var PartLng;

                        var Points = new Array();
                        var PointsOffset = new Array();

                        for (point = 0; point <= 1; point += o.Resolution) {
                            Points.push(point);
                            offset = (0.6 * Math.sin((Math.PI * point / 1)));
                            PointsOffset.push(offset);
                        }

                        var OffsetMultiplier = 0;

                        if (o.Horizontal == true) {

                            var OffsetLenght = (o.LngEnd - o.LngStart) * 0.1;

                        } else {

                            var OffsetLenght = (o.LatEnd - o.LatStart) * 0.1;

                        }

                        for (var i = 0; i < Points.length; i++) {

                            if (i == 4) {

                                OffsetMultiplier = 1.5 * o.Multiplier;

                            }

                            if (i >= 5) {

                                OffsetMultiplier = (OffsetLenght * PointsOffset[i]) * o.Multiplier;

                            } else {

                                OffsetMultiplier = (OffsetLenght * PointsOffset[i]) * o.Multiplier;

                            }

                            if (o.Horizontal == true) {

                                PartLat = (o.LatStart + ((o.LatEnd - o.LatStart) * Points[i])) + OffsetMultiplier;
                                PartLng = (o.LngStart + ((o.LngEnd - o.LngStart) * Points[i]));

                            } else {

                                PartLat = (o.LatStart + ((o.LatEnd - o.LatStart) * Points[i]));
                                PartLng = (o.LngStart + ((o.LngEnd - o.LngStart) * Points[i])) + OffsetMultiplier;

                            }

                            curvedLineCreateSegment(LastLat, LastLng, PartLat, PartLng, o.Color, o.Opacity, o.Weight, o.GapWidth, o.Map);

                            LastLat = PartLat;
                            LastLng = PartLng;

                        }

                        curvedLineCreateSegment(LastLat, LastLng, o.LatEnd, o.LngEnd, o.Color, o.Opacity, o.Weight, o.GapWidth, o.Map);

                    });

                }

            });

            function curvedLineCreateSegment(LatStart, LngStart, LatEnd, LngEnd, Color, Opacity, Weight, GapWidth, Map) {

                evenOdd++;

                if (evenOdd % (GapWidth + 1))
                    return;

                var LineCordinates = new Array();

                LineCordinates[0] = new google.maps.LatLng(LatStart, LngStart);
                LineCordinates[1] = new google.maps.LatLng(LatEnd, LngEnd);

                var Line = new google.maps.Polyline({
                    path: LineCordinates,
                    geodesic: false,
                    strokeColor: Color,
                    strokeOpacity: Opacity,
                    strokeWeight: Weight
                });

                Line.setMap(Map);


            }

        })(jQuery);
        //-------------------------------------
    </script>*@